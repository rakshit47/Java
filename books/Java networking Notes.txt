Networking in java
IP Address
An IP address is unique identification number allocated to every computer on a network or internet. IP address contains some bytes which identifies the network and the actual computer inside the network.

What is DNS (Domain name system)?

DNS is a service on Internet that maps the IP addresses with corresponding website names.
Example of IP Address : 192.168.43.14

What is a Socket?
A socket is point of connection between a server and a client on a network.

Notes:- Establishing communication between a server and a client using sockets is called 'socket progrmming'.
A socket, at server site is called server socket and is created using 'ServerSocket' class in java.
A socket, at Client site is called 'Socket' and is created using Socket class.Both the ServerSocket and Socket classes are available in java.net packge

What is Port number?
Port number is a 2 byte number which is used to identify asocket uniquely.

Notes:-Every new service on the net should assined a new port number.

Port Number	Application
13	Data and time service
21	FTP - Transfer files
23	Telnet - Remote Login
25	SMTP - Delivers mails
67	BOOTP – Boot configuration
80	HTTP – Transfer web pages
109	POP- accesses mailboxes
Each socket is given an identification which is called port number. Length of port is 2Byte.

Knowing IP Address.
It is possible to know the IP Address of a website on Internet with the help of getByname( ) method of InetAddress classof java.net package. The getByname( ) method
takes the host name (server name) and returns InetAddress, which is nothing but the IPaddress of that server.   

Example
Program 1 :WAJP To accept a website name and return its IPAddress.

import java.io.*;
import java.net.*;
class Address{
    public static void main(String[] args)throws IOException 
{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Enter a website' name : ");
        String site = br.readLine();
        try {
            InetAddress ip = InetAddress.getByName(site);
            System.out.println("IP Address is : "+ip);
        } catch (UnknownHostException ue) {
            System.out.println("Website not found");
        }
    }
}


URL
URL(Uniform resource locator) represents the address that is specified to access some information or resource on Internet.
The URL contain four parts 
http://www.bitmesra.ac.in.80/index.html
1)The protocol to use (http://).
2)The server name or IP address of sever(www.bitmesra.ac.in)
3)3rd part represents port number,which is optional(80).
4) Last part is the file that is referred generally index.html or home.html    


URL is represented by a class URL in java.net package. To create a object of URL class, we can use the following formats:
URL obj = new URL(String protocol, String host, int port,String path);

<OR>
URL obj = new URL(String protocol, String host, String path);

Example :
URL obj = new URL("https://www.facebook.com/index.html");


Program 2 : To retrieve different parts of the URL supplied to URL class object.
myURL.java
 import java.io.*;
import java.net.*;
class myURL {
    public static void main(String[] args)throws IOException 
      {
        URL obj = new URL("https://www.facebook.com/index.html");
        System.out.println("Protocol : "+obj.getProtocol());
        System.out.println("Host : "+obj.getHost());
        System.out.println("File : "+obj.getFile());
        System.out.println("Port : "+obj.getPort());
        System.out.println("Path : "+obj.getPath());
        System.out.println("External form : "+obj.toExternalForm());
    }
}
 
URL Connection Class is useful to actually connect to a website or resorce on a network and get all details of the website.
for example www.yuhoo.com, we should pass its URL to the object of URL class.
Then using openConnection()method, we shuold establish a connect with the site on the Internet.This method returns URLConnection object.
Then using URLConnection class method,we can display all details of the website



Program 3 :WAJP to display the all details of a website

import java.io.*;
import java.net.*;
import java.util.*;
public class Details 
{
    public static void main(String args[]) throws Exception 
      {
        URL obj = new URL("http://www.yahoo.com/index.html");
        URLConnection conn = obj.openConnection();
        System.out.println("Date:" + new Date(conn.getDate()));
        System.out.println("Connect-type" + conn.getContentType());
        System.out.println("Expity:" + conn.getExpiration());
        System.out.println("Last Modified:" + new Date(conn.getLastModified()));
        int l = conn.getContentLength();
        System.out.println("ContentLength:" + l);
        if (l == 0) {
            System.out.println("content not available");
            return;
        } else {
            int ch;
            InputStream in = conn.getInputStream();
            while ((ch = in.read()) != -1)
                System.out.print((char) ch);
        }
    }
}

Creating a Server that Sends Data
We can create a socket that can be used to connect a server and a client. Once the socket is created, server can send data can send data to the client and the client can receive.  

*At Server side, create a server with some port number.This is done using Server Socket class as.
ServerSocket ss = new ServerSocket(777);

*Now, we should make the server wait till a client accepts connection.This is done using accept method.
Socket s = ss.accept();

*Attach output stream to the server socket using getOutputStream() method.This method returns OutputStream object. This stream ie used by the socket to send data to client.
OutputStream obj = s.getOutputStream();

*Take another stream like PrintStream to send data till the socket.
PrintStream ps = new PrintStream(obj);

*Finally the PrintStream is used by server to send data to the client.We have print() and println() method available in PrintStream.

ps.printl pritn(str);

*Then close all connections etc. This can be done by closing all the streams and sockets at server side as: 

ss.close();
s.close();
ps.close();




 
Program 4 : Creating a server for purpose of sending strings to the client

import java.io.*;
import java.net.*;
class Server1
{
public static void main(String args[]) throws Exception
{
  ServerSocket ss=new ServerSocket(1234);
  Socket s=ss.accept();
  System.out.println("connection established");
   OutputStream obj =s.getOutputStream();
   PrintStream ps = new PrintStream(obj);
   String str = "Hello Client im bablu";
   ps.println(str);
   ps.println("Bye");
   ps.close();
   ss.close();
   s.close();
 }
}
 

Creating a client that Receives data 
We can write a client program that receive all the strings from the server. 
Steps:
*First We create a socket at client side using using Socket class as.

Socket s = new Socket("IP Adress", port number);

  

*Add inputStream to the socket so that socket will be able to receive the data.

InputStream obj = s.getInputStream();

*To read data from the socket into the client

BufferedReader br = new BufferedReader(new InputStreamReader(obj));

*Now we can read data coming from BufferedReader object, using read() method for one character at atime and readLine() method can read a string. 

str = br.readLine();

Then close connection by closing all streams and sockets.

br.close();
s.close();

Program 5: Creating a client-side program
import java.io.*;
import java.net.*;
class Client1
{
public static void main(String args[]) throws Exception
{
   Socket s=new Socket("localhost",777);
   InputStream obj = s.getInputStream();
   BufferedReader br = new BufferedReader(new InputStreamReader(obj));
   String str;
   while((str = br.readLine()) != null)
   System.out.println(" from server :" +str);
   br.close();
   s.close();
 }
}
Expected output :


Server Side							    Client side



Two-way Communication between Server and Client

It is possible to send data from server and receive the eresponse from the client and vice versa







